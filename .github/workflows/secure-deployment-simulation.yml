name: Secure Deployment Simulation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  simulate-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate SSH private key format
        run: |
          echo "$SSH_PRIVATE_KEY" > key.pem
          chmod 600 key.pem

          first_line=$(head -n 1 key.pem)

          if [[ "$first_line" != "-----BEGIN OPENSSH PRIVATE KEY-----" && "$first_line" != "-----BEGIN RSA PRIVATE KEY-----" ]]; then
            echo "❌ Clé non reconnue : début inattendu → '$first_line'"
            exit 1
          fi

          if grep -q "ENCRYPTED" key.pem; then
            echo "❌ La clé est chiffrée avec une passphrase, ce n'est pas compatible avec un déploiement automatisé."
            exit 1
          fi

          echo "✅ Clé privée SSH détectée et sans passphrase"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Check secret variables
        run: |
          if [ -z "$SERVER_IP" ]; then
            echo "❌ SERVER_IP est vide"
            exit 1
          fi

          if ! [[ "$SERVER_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ SERVER_IP ne semble pas être une adresse IP valide"
            exit 1
          fi

          if [ -z "$SERVER_USER" ]; then
            echo "❌ SERVER_USER est vide"
            exit 1
          fi

          echo "✅ Secrets valides"
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}

      - name: Simulate command execution - mkdir with sudo
        run: |
          echo "Création d'un répertoire simulé avec sudo..."
          sudo mkdir -p /tmp/simulated-deploy/app
          echo "✅ Répertoire /tmp/simulated-deploy/app créé avec sudo"

      - name: Simulate service check - nginx (or fallback)
        run: |
          echo "Vérification d'un service système..."
          if systemctl list-units --type=service | grep -q nginx; then
            sudo systemctl status nginx
            echo "✅ Service nginx trouvé"
          else
            echo "Service nginx non trouvé, simulation avec cron"
            sudo systemctl status cron
            echo "✅ Service cron testé comme substitut"
          fi

      - name: Simulate command with sudo
        run: |
          echo "Test d'une commande nécessitant sudo :"
          sudo ls /root || echo "✅ sudo fonctionne mais /root est inaccessible (normal pour le runner GitHub)"

      - name: Cleanup test folder
        run: |
          sudo rm -rf /tmp/simulated-deploy
