name: Secure Deployment Simulation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  simulate-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Cloner le d√©p√¥t
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. V√©rifier que la cl√© priv√©e SSH est correcte et sans passphrase
      - name: Validate SSH private key format
        run: |
          echo "$SSH_PRIVATE_KEY" > key.pem
          chmod 600 key.pem

          echo "üìÇ Premi√®res lignes de la cl√© :"
          head -n 2 key.pem

          first_line=$(head -n 1 key.pem)

          if [[ "$first_line" != "-----BEGIN OPENSSH PRIVATE KEY-----" && "$first_line" != "-----BEGIN RSA PRIVATE KEY-----" ]]; then
            echo "‚ùå Cl√© non reconnue : d√©but inattendu ‚Üí '$first_line'"
            exit 1
          fi

          if grep -q "ENCRYPTED" key.pem; then
            echo "‚ùå La cl√© est chiffr√©e avec une passphrase, ce n'est pas compatible avec un d√©ploiement automatis√©."
            exit 1
          fi

          echo "‚úÖ Cl√© priv√©e SSH d√©tect√©e et sans passphrase"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      # 3. V√©rifier que les autres secrets sont bien d√©finis
      - name: Check secret variables
        run: |
          if [ -z "$SERVER_IP" ]; then
            echo "‚ùå SERVER_IP est vide"
            exit 1
          fi

          if [ -z "$SERVER_USER" ]; then
            echo "‚ùå SERVER_USER est vide"
            exit 1
          fi

          echo "üåç SERVER_IP: $SERVER_IP"
          echo "üë§ SERVER_USER: $SERVER_USER"
          echo "‚úÖ Secrets valides"
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}

      # 4. Simulation de commandes SSH (pas de connexions r√©elle)
      - name: Simulate SSH deployment
        run: |
          echo "üõ†Ô∏è Simulation :"
          echo "ssh -i key.pem $SERVER_USER@$SERVER_IP 'mkdir -p /var/www/html/tp-app'"
          echo "ssh -i key.pem $SERVER_USER@$SERVER_IP 'sudo systemctl restart nginx'"
          echo "‚úÖ Fin de la simulation"
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
