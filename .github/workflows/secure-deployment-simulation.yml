name: Secure Deployment Simulation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  simulate-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Cloner le d√©p√¥t
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. V√©rifier que la cl√© priv√©e SSH est valide et sans passphrase
      - name: Validate SSH private key format
        run: |
          echo "$SSH_PRIVATE_KEY" > key.pem
          chmod 600 key.pem

          # V√©rifie si c'est bien une cl√© priv√©e SSH (contenu texte)
          if ! grep -q "PRIVATE KEY" key.pem; then
            echo "‚ùå Ce n'est pas une cl√© priv√©e SSH valide"
            exit 1
          fi

          # V√©rifie l'absence de passphrase
          if grep -q "ENCRYPTED" key.pem; then
            echo "‚ùå La cl√© est chiffr√©e avec une passphrase, ce n'est pas compatible avec un d√©ploiement automatis√©."
            exit 1
          fi

          echo "‚úÖ Cl√© priv√©e SSH valide et sans passphrase d√©tect√©e"
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      # 3. V√©rifier les variables d'environnement (simples et GitHub)
      - name: Check secret variables and environment
        run: |
          echo "üì¶ V√©rification des variables d'environnement..."

          if [ -z "$SERVER_IP" ]; then
            echo "‚ùå SERVER_IP est vide"
            exit 1
          fi

          if [ -z "$SERVER_USER" ]; then
            echo "‚ùå SERVER_USER est vide"
            exit 1
          fi

          echo "üåê SERVER_IP: $SERVER_IP"
          echo "üë§ SERVER_USER: $SERVER_USER"
          echo "üñ•Ô∏è Syst√®me runner GitHub : $RUNNER_OS"
          echo "‚úÖ Secrets pr√©sents et format correct"
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}

      # 4. Simulation de commandes SSH
      - name: Simulate SSH deployment commands
        run: |
          echo "üõ†Ô∏è Simulation des commandes SSH qui seraient ex√©cut√©es :"
          echo "ssh -i key.pem $SERVER_USER@$SERVER_IP 'mkdir -p /var/www/html/tp-app'"
          echo "ssh -i key.pem $SERVER_USER@$SERVER_IP 'sudo systemctl restart nginx'"
          echo "‚úÖ Simulation SSH termin√©e (aucune connexion r√©elle effectu√©e)"
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
